{
    "Bubble Sort": {
        "prefix": "JS1-bubble",
        "body": [
            "function bubble_Sort(a)",
            "{",
            "\t var swapp;",
            "\t var n = a.length-1;",
            "\t var x=a;",
            "\t do {",
            "\t swapp = false;",
            "\t\t for (var i=0; i < n; i++)",
            "\t\t {",
            "\t\t     if (x[i] < x[i+1])",
            "\t\t     {",
            "\t\t        var temp = x[i];",
            "\t\t        x[i] = x[i+1];",
            "\t\t        x[i+1] = temp;",
            "\t\t        swapp = true;",
            "\t\t     }",
            "\t\t }",
            "\t\t n--;",
            "\t } while (swapp);",
            " return x; ",
            "}"
        ],
        "description": "Bubble Sort Example - https://www.w3resource.com/javascript-exercises/javascript-function-exercise-24.php"
    }
,
     "addEventListener": {
        "prefix": "ae",
        "body": [
            "${1:document}.addEventListener('${2:load}', function (e) {",
            "\t${3:// body}",
            "});"
        ],
        "description": "Code snippet for \"addEventListener\""
    },
    "appendChild": {
        "prefix": "ac",
        "body": [
            "${1:document}.appendChild(${2:elem});"
        ],
        "description": "Code snippet for \"appendChild\""
    },
    "removeChild": {
        "prefix": "rc",
        "body": [
            "${1:document}.removeChild(${2:elem});"
        ],
        "description": "Code snippet for \"removeChild\""
    },
    "createElement": {
        "prefix": "cel",
        "body": [
            "${1:document}.createElement(${2:elem});"
        ],
        "description": "Code snippet for \"createElement\""
    },
    "createDocumentFragment": {
        "prefix": "cdf",
        "body": [
            "${1:document}.createDocumentFragment();$2"
        ],
        "description": "Code snippet for \"createDocumentFragment\""
    },
    "classList.add": {
        "prefix": "ca",
        "body": [
            "${1:document}.classList.add('${2:class}');"
        ],
        "description": "Code snippet for \"classList.add\""
    },
    "classList.toggle": {
        "prefix": "ct",
        "body": [
            "${1:document}.classList.toggle('${2:class}');"
        ],
        "description": "Code snippet for \"classList.toggle\""
    },
    "classList.remove": {
        "prefix": "cr",
        "body": [
            "${1:document}.classList.remove('${2:class}');"
        ],
        "description": "Code snippet for \"classList.remove\""
    },
    "getElementById": {
        "prefix": "gi",
        "body": [
            "${1:document}.getElementById('${2:id}');"
        ],
        "description": "Code snippet for \"getElementById\""
    },
    "getElementsByClassName": {
        "prefix": "gc",
        "body": [
            "${1:document}.getElementsByClassName('${2:class}');"
        ],
        "description": "Code snippet for \"getElementsByClassName\""
    },
    "getElementsByTagName": {
        "prefix": "gt",
        "body": [
            "${1:document}.getElementsByTagName('${2:tag}');"
        ],
        "description": "Code snippet for \"getElementsByTagName\""
    },
    "getAttribute": {
        "prefix": "ga",
        "body": [
            "${1:document}.getAttribute('${2:attr}');"
        ],
        "description": "Code snippet for \"getAttribute\""
    },
    "setAttribute": {
        "prefix": "sa",
        "body": [
            "${1:document}.setAttribute('${2:attr}', ${3:value});"
        ],
        "description": "Code snippet for \"setAttribute\""
    },
    "removeAttribute": {
        "prefix": "ra",
        "body": [
            "${1:document}.removeAttribute('${2:attr}');"
        ],
        "description": "Code snippet for \"removeAttribute\""
    },
    "innerHTML": {
        "prefix": "ih",
        "body": [
            "${1:document}.innerHTML = '${2:elem}';"
        ],
        "description": "Code snippet for \"innerHTML\""
    },
    "textContent": {
        "prefix": "tc",
        "body": [
            "${1:document}.textContent = '${2:content}';"
        ],
        "description": "Code snippet for \"textContent\""
    },
    "querySelector": {
        "prefix": "qs",
        "body": [
            "${1:document}.querySelector('${2:selector}');"
        ],
        "description": "Code snippet for \"querySelector\""
    },
    "querySelectorAll": {
        "prefix": "qsa",
        "body": [
            "${1:document}.querySelectorAll('${2:selector}');"
        ],
        "description": "Code snippet for \"querySelectorAll\""
    }
,
    "app": {
        "prefix": "app",
        "body": "const app = express();",
        "description": "Initiazlizing app variable"
    },
    "app.use": {
        "prefix": "app.use",
        "body": "app.use('$1');",
        "description": "Insert app.use"
    },
    "app.use.json": {
        "prefix": "app.json",
        "body": "app.use(express.json());",
        "description": "Insert express.json to app (app.use)"
    },
    "app.get": {
        "prefix": "app.get",
        "body": [
            "app.get('${1:path}', (req, res) => {",
            "return \t$2",
            "});"
        ],
        "description": "Routes HTTP GET request."
    },
    "app.post": {
        "prefix": "app.post",
        "body": [
            "app.post('${1:path}', (req, res) => {",
            "return \t$2",
            "});"
        ],
        "description": "Routes HTTP POST request."
    },
    "app.put": {
        "prefix": "app.put",
        "body": [
            "app.put('${1:path}', (req, res) => {",
            "return \t$2",
            "});"
        ],
        "description": "Routes HTTP PUT request."
    },
    "app.delete": {
        "prefix": "app.delete",
        "body": [
            "app.delete('${1:path}', (req, res) => {",
            "return \t$2",
            "});"
        ],
        "description": "To route to a specified path with a callback"
    },
    "app.patch": {
        "prefix": "app.patch",
        "body": [
            "app.patch('${1:path}', (req, res) => {",
            "return \t$2",
            "});"
        ],
        "description": "Routes HTTP PATCH request."
    },
    "app.route": {
        "prefix": "app.route",
        "body": [
            "app.route('/${1:path}')",
            ".all(function (req, res, next) {",
            "  // runs for all HTTP verbs first",
            "  // think of it as route specific middleware!",
            "})",
            ".get(function (req, res, next) {",
            "  res.json({})",
            "})",
            ".post(function (req, res, next) {",
            "  // maybe add a new event...",
            "});"
        ],
        "description": "app.route"
    },
    "app.listen": {
        "prefix": "listen",
        "body": " app.listen(${1:port});",
        "description": "Starts a UNIX socket and listens for connections on the given path. This method is identical to Node’s http.Server.listen()"
    },
    "app.listen template": {
        "prefix": "app.listen",
        "body": [
            "app.listen(${1:port}, () => {",
            "\tconsole.log(`Server started on ${2:port}`);",
            "});"
        ],
        "description": "Starts a UNIX socket and listens for connections on the given path. This method is identical to Node’s http.Server.listen()"
    },
    "app template": {
        "prefix": "app.template",
        "body": [
            "const express = require('express');",
            "const app = express();",
            "",
            "app.get('${1:path}', (req, res) => {",
            "return \t${2:body}",
            "});",
            "",
            "app.listen(process.env.PORT || ${3:port}, () => {",
            "\tconsole.log(`Server started on ${3:port}`);",
            "});",
            "",
            "//npm start, open your browser and run localhost:${3:port}"
        ],
        "description": "Create a express app template"
    },
    "router": {
        "prefix": "router",
        "body": "const router = require('express').Router();",
        "description": "Initiazlizing router variable"
    },
    "router.use": {
        "prefix": "router.use",
        "body": "router.use($1);",
        "description": "Insert router.use()"
    },
    "router.use.path": {
        "prefix": "router.use.path",
        "body": "router.use('{1:path}', ${2:router});",
        "description": "Insert router.use() with path"
    },
    "router.get": {
        "prefix": "router.get",
        "body": [
            "router.get('${1:path}', (req, res) => {",
            "return \t$2",
            "});"
        ],
        "description": "Routes HTTP GET request."
    },
    "router.post": {
        "prefix": "router.post",
        "body": [
            "router.post('${1:path}', (req, res) => {",
            "return \t$2",
            "});"
        ],
        "description": "Routes HTTP POST request."
    },
    "router.put": {
        "prefix": "router.put",
        "body": [
            "router.put('${1:path}', (req, res) => {",
            "return \t$2",
            "});"
        ],
        "description": "Routes HTTP PUT request."
    },
    "router.delete": {
        "prefix": "router.delete",
        "body": [
            "router.delete('${1:path}', (req, res) => {",
            "return \t$2",
            "});"
        ],
        "description": "To route to a specified path with a callback"
    },
    "router.patch": {
        "prefix": "router.patch",
        "body": [
            "router.patch('${1:path}', (req, res) => {",
            "return \t$2",
            "});"
        ],
        "description": "Routes HTTP PATCH request."
    },
    "require a module": {
        "prefix": "require",
        "body": "const $1 = require('$2');",
        "description": "Require package from node_modules/ or project"
    },
    "require express module": {
        "prefix": "express",
        "body": "const express = require('express');",
        "description": "Require Expess package from node_modules/"
    },
    "import express module": {
        "prefix": "iexpress",
        "body": "import express from 'express';",
        "description": "Import Expess package from node_modules/"
    },
    "require Router() from express": {
        "prefix": "router",
        "body": "const router = require('express').Router();",
        "description": "Require Router() from express package"
    },
    "require routes index": {
        "prefix": "routes",
        "body": "const routes = require('./routes');",
        "description": "Require routes index from routes directory"
    },
    "export controller": {
        "prefix": "controller",
        "body": [
            "module.exports = {",
            "  index (req, res) {",
            "    ${1:body}",
            "  }",
            "}"
        ],
        "description": "Export Controller"
    },
    "export router": {
        "prefix": "export.router",
        "body": "module.exports = router",
        "description": "Export Router"
    },
    "export model": {
        "prefix": "export.model",
        "body": "module.exports = model('${$1:model}', ${$2:model}",
        "description": "Export Model"
    }
,
    "Comment": {
        "prefix": "cc",
        "body": [
            "/**",
            "* ${0}",
            "**/"
        ],
        "description": "console.log"
    },
    "console.log": {
        "prefix": "log",
        "body": "console.log(${0});",
        "description": "console.log"
    },
    "console.error": {
        "prefix": "error",
        "body": "console.error(${0});",
        "description": "console.error"
    },
    "console.warn": {
        "prefix": "warn",
        "body": "console.warn(${0});",
        "description": "console.warn"
    },
    "console.log labeled": {
        "prefix": "logLabel",
        "body": "console.log('${0}', ${0});",
        "description": "console.log labeled"
    },
    "console.error labeled": {
        "prefix": "cel",
        "body": "console.error('${0}', ${0});",
        "description": "console.error labeled"
    },
    "console.warn labeled": {
        "prefix": "cwl",
        "body": "console.warn('${0}', ${0});",
        "description": "console.warn labeled"
    },
    "setTimeout": {
        "prefix": "st",
        "body": "setTimeout(() => {\n\t${0}\n}, ${1:delay});",
        "description": "setTimeout"
    },
    "setInterval": {
        "prefix": "si",
        "body": "setInterval(() => {\n\t${0}\n}, ${1:delay});",
        "description": "setInterval"
    },
    "setImmediate": {
        "prefix": "sim",
        "body": "setImmediate(() => {\n\t${0}\n});",
        "description": "setImmediate"
    },
    "process nextTick": {
        "prefix": "nt",
        "body": "process.nextTick(() => {\n\t${0}\n});",
        "description": "process nextTick"
    },
    "Declarations a new variable": {
        "prefix": "var",
        "body": "${1|const,let,var|}  ${2:name} = ${3|'string value',1,[],{},true,false,null|};\n${0}",
        "description": "1. Declare a new variable(const,let,var) \n 2. Assign it a value (datatypes:'string value',1,[],{},true,false,null). \n 3. VAR is HOISTED.\n 4. CONST cannot be REASSIGNED = new TYPE. \n 5.   CONST is Mutable if = [] or {}"
    },
    "let assignment": {
        "prefix": "let",
        "body": "let ${1:name} ${2|=true,=false,='string',=1,=[],={},=null, |};\n${0}",
        "description": "let assignment"
    },
    "const assignment": {
        "prefix": "con",
        "body": "const ${1:name} ${2|=true,=false,='string',=1,=[],={},=null, |};\n${0}",
        "description": "const assignment"
    },
    "destructuring assignment": {
        "prefix": "dl=",
        "body": "${1|const,let|,${2:name}} = ${2:value};",
        "description": "destructuring assignment with optional let"
    },

    "if statement": {
        "prefix": "if",
        "body": "if (${1:condition}) {\n\t${0}\n}",
        "description": "if statement"
    },
    "if/else statement": {
        "prefix": "ife",
        "body": "if (${1:condition}) {\n\t${0}\n} else {\n\t\n}",
        "description": "if/else statement"
    },
    "else if statement": {
        "prefix": "ei",
        "body": "else if (${1:condition}) {\n\t${0}\n}",
        "description": "else if statement"
    },
    "ternary operator": {
        "prefix": "ter",
        "body": "${1:condition} ? ${2:expression} : ${3:expression};",
        "description": "ternary operator"
    },
    "switch case": {
        "prefix": "sw",
        "body": "switch (${1:expr}) {\n\tcase ${2:value}:\n\t\treturn $0;\n\tdefault:\n\t\treturn;\n}",
        "description": "switch case"
    },
    "try/catch": {
        "prefix": "tc",
        "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}",
        "description": "try/catch"
    },
    "try/finally": {
        "prefix": "tf",
        "body": "try {\n\t${0}\n} finally {\n\t\n}",
        "description": "try/finally"
    },
    "try/catch/finally": {
        "prefix": "tcf",
        "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}",
        "description": "try/catch/finally"
    },

    "for loop": {
        "prefix": "fl",
        "body": "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${0}\n}",
        "description": "for loop"
    },
    "reverse for loop": {
        "prefix": "rfl",
        "body": "for (let ${1:i} = ${2:iterable}.length - 1; ${1:i} >= 0; ${1:i}--) {\n\t${0}\n}",
        "description": "reverse for loop"
    },
    "for in loop": {
        "prefix": "fi",
        "body": "for (let ${1:key} in ${2:array}) {\n\tif (${2:array}.hasOwnProperty(${1:key})) {\n\t\t${0}\n\t}\n}",
        "description": "for in loop"
    },
    "for of loop ": {
        "prefix": "fo",
        "body": "for (let ${1:key} of ${2:array}) {\n\t${0}\n}",
        "description": "for of loop "
    },
    "while loop": {
        "prefix": "wl",
        "body": "while (${1:condition}) {\n\t${0}\n}",
        "description": "while loop"
    },

    "anonymous function": {
        "prefix": "afun",
        "body": "function (${1:arguments}) {\n\t${0}\n}",
        "description": "anonymous function"
    },
    "Function Declaration ": {
        "prefix": "fun",
        "body": "function ${1:name}(${2:arguments}) {\n\t${0}\n}",
        "description": "Declaration functions are HOISTED in browsers, but not in node."
    },
    "Function expression": {
        "prefix": "fn",
        "body": "const ${1:name} = function ${1:name}(${2:arguments}) {\n\t${0}\n}",
        "description": "A function expression is not hoisted."
    },
    "Arrow expression ": {
        "prefix": "nf",
        "body": "const ${1:name} = (${2:arguments}) => {\n\t${0}\n}",
        "description": "Named (arrow) function with body "
    },
    "immediately-invoked function expression (IIFE)": {
        "prefix": "iife",
        "body": "((${1:arguments}) => {\n\t${0}\n})(${2});",
        "description": "immediately-invoked function expression (IIFE): self-executive code"
    },
    "anonymous arrow function ": {
        "prefix": "af",
        "body": "(${1:arguments}) => ${2:statement}",
        "description": "anonymous arrow function: useful for callbacks"
    },
    "arrow function with body ": {
        "prefix": "afb",
        "body": "(${1:arguments}) => {\n\t${0}\n}",
        "description": " arrow function with body "
    },
    "generator function ": {
        "prefix": "gf",
        "body": "function* (${1:arguments}) {\n\t${0}\n}",
        "description": "generator function "
    },
    "named generator function ": {
        "prefix": "gfn",
        "body": "function* ${1:name}(${2:arguments}) {\n\t${0}\n}",
        "description": "named generator function "
    },

    "sequence of 0..n": {
        "prefix": "seq",
        "body": "[...Array(${1:length}).keys()]${0}",
        "description": "sequence of 0..n"
    },
    "forEach loop": {
        "prefix": "fe",
        "body": "${1}.forEach((${2:item}) => {\n\t${0}\n});",
        "description": "forEach loop"
    },
    "map": {
        "prefix": "map",
        "body": "${1}.map((${2:item}) => {\n\t${0}\n});",
        "description": "map"
    },
    "reduce": {
        "prefix": "reduce",
        "body": "${1}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial});",
        "description": "reduce"
    },
    "filter": {
        "prefix": "filter",
        "body": "${1}.filter(${2:item} => {\n\t${0}\n});",
        "description": "filter"
    },
    "find": {
        "prefix": "find",
        "body": "${1}.find(${2:item} => {\n\t${0}\n});",
        "description": "find"
    },

    "object literal": {
        "prefix": "ol",
        "body": "{\n\tkv${0}\n};",
        "description": "object literal"
    },
    "same-line object literal": {
        "prefix": "slol",
        "body": "{ kv${0} };",
        "description": "same-line object literal"
    },
    "key/value pair": {
        "prefix": "kv",
        "body": "${1:key}: ${2:value},",
        "description": "key/value pair"
    },
    "class ": {
        "prefix": "c",
        "body": "class ${1:name,\n\tconstructor(${2:arguments}) {\n\t\t${0}\n\t}\n}",
        "description": "class "
    },
    "child class ": {
        "prefix": "cex",
        "body": "class ${1:name} extends ${2:base,\n\tconstructor(${3:arguments}) {\n\t\tsuper(${3:arguments});\n\t\t${0}\n\t}\n}",
        "description": "child class "
    },
    "class constructor ": {
        "prefix": "ctor",
        "body": "constructor(${1:arguments}) {\n\tsuper(${1:arguments});${0}\n}",
        "description": "class constructor "
    },
    "method (ES6 syntax)": {
        "prefix": "m",
        "body": "${1:method}(${2:arguments}) {\n\t${0}\n}",
        "description": "method (ES6 syntax)"
    },
    "getter (ES6 syntax)": {
        "prefix": "get",
        "body": "get ${1:property}() {\n\t${0}\n}",
        "description": "getter (ES6 syntax)"
    },
    "setter (ES6 syntax)": {
        "prefix": "set",
        "body": "set ${1:property}(${2:value}) {\n\t${0}\n}",
        "description": "setter (ES6 syntax)"
    },
    "getter and setter (ES6 syntax)": {
        "prefix": "gs",
        "body": "get ${1:property}() {\n\t${0}\n}\nset ${1:property}(${2:value}) {\n\t\n}",
        "description": "getter and setter (ES6 syntax)"
    },
    "prototypal constructor": {
        "prefix": "pctor",
        "body": "var ${1:Class} = function(${2:arguments}) {\n\t${0}\n};",
        "description": "prototypal constructor"
    },
    "prototype method": {
        "prefix": "proto",
        "body": "${1:Class}.prototype.${2:method} = function(${3:arguments}) {\n\t${0}\n};",
        "description": "prototype method"
    },
    "Object.assign": {
        "prefix": "oa",
        "body": "Object.assign(${1:dest}, ${2:source})",
        "description": "Object.assign"
    },
    "Object.assign copy (shallow clone)": {
        "prefix": "oc",
        "body": "Object.assign({}, ${1:original}, ${2:source})",
        "description": "Object.assign copy (shallow clone)"
    },
    "Optional chaining operator - https":{
        "prefix": "oco",
        "body": [
            "const ${1:variable} = ${2:Parent}.${3:Child}?.${4:ChildPropery};",
            "console.log(${1:variable});"
        ],
        "description": "Optional chaining operator - https"
    },
    "return": {
        "prefix": "r",
        "body": "return ${0};",
        "description": "return"
    },
    "return Promise ": {
        "prefix": "rp",
        "body": "return new Promise((resolve, reject) => {\n\t${0}\n});",
        "description": "return Promise "
    },
    "return complex value (such as JSX components)": {
        "prefix": "rc",
        "body": "return (\n\t${0}\n);",
        "description": "return complex value (such as JSX components)"
    },
    "typeof": {
        "prefix": "tof",
        "body": "typeof ${1:source} === '${2:undefined}'",
        "description": "typeof"
    },
    "instanceof": {
        "prefix": "iof",
        "body": "${1:source} instanceof ${2:Object}",
        "description": "instanceof"
    },
    "Promise ": {
        "prefix": "pr",
        "body": "new Promise((resolve, reject) => {\n\t${0}\n})",
        "description": "Promise "
    },
    "Promise.then": {
        "prefix": "then",
        "body": "${1:promise}.then((${2:value}) => {\n\t${0}\n})",
        "description": "Promise.then"
    },
    "Promise.catch": {
        "prefix": "catch",
        "body": "${1:promise}.catch((${2:err}) => {\n\t${0}\n})",
        "description": "Promise.catch"
    },
    "export ": {
        "prefix": "ex",
        "body": "export ${1:member};",
        "description": "export "
    },
    "export default ": {
        "prefix": "exd",
        "body": "export default ${1:member};",
        "description": "export default "
    },
    "import module ": {
        "prefix": "imp",
        "body": "import ${1:*} from '${2:module}';",
        "description": "import module "
    },
    "import module as ": {
        "prefix": "ima",
        "body": "import ${1:*} as ${2:name} from '${3:module}';",
        "description": "import module as "
    }
,
    "require mongoose": {
        "prefix": "mongoose",
        "body": "const mongoose = require('mongoose');",
        "description": "Require mongoose from node_modules/"
    },
    "require mongoose connection": {
        "prefix": "mongoose.conn",
        "body": [
            "mongoose.connect(",
            "'mongodb+srv://${1:username}:${2:password}@cluster0-erizp.mongodb.net/${3:database}?retryWrites=true&w=majority'",
            ", {",
            "  useNewUrlParser: true,",
            "  useCreateIndex: true,",
            "  useUnifiedTopology: true",
            "});"
        ],
        "description": "Require mongoose from node_modules/"
    }
,
    "Async/await": {
        "prefix": "node-async-await",
        "body": [
            "async function getData() {",
            "  return Promise.resolve('data');",
            "}",
            "",
            "async function getMoreData(data) {",
            "  return Promise.resolve(data + 'more data');",
            "}",
            "",
            "function getAll() {",
            "  const data = await getData();",
            "  const moreData = await getMoreData(data);",
            "  return `All the data: ${data}, ${moreData}`;",
            "}",
            "",
            "getAll().then((all) => {",
            "  console.log('all the data')",
            "})"
        ],
        "description": "demonstrates async/await"
    },
    "Async IIFE": {
        "prefix": "node-iife",
        "body": "(async (${1:arguments}) => {\n\t${0}\n})(${2});",
        "description": "immediately-invoked ASYNC function"
    },
    "file read async": {
        "prefix": "node-file-read-async",
        "body": [
            "const fs = require('fs');",
            "fs.readFile('${1:input.txt}', function (err, data) {",
            "  if (err) return console.error(err);",
            "  console.log(data.toString());",
            "});"
        ],
        "description": "Reads a file asynchronously"
    },
    "Node.js style callback": {
        "prefix": "cb",
        "body": "(err, ${1:value}) => {${0}}",
        "description": "Node.js style callback"
    },
    "require": {
        "prefix": "re",
        "body": "require('${1:module}');",
        "description": "require"
    },
    "require local": {
        "prefix": "rel",
        "body": "require('./${1:module}');",
        "description": "require local"
    },
    "require assignment": {
        "prefix": "req",
        "body": "const ${1:module} = require('${1:module}');",
        "description": "require assignment"
    },
    "require assignment local": {
        "prefix": "reql",
        "body": "const ${1:module} = require('./${1:module}');",
        "description": "require assignment local"
    },
    "destructuring require assignment": {
        "prefix": "dreq",
        "body": "const {${1:module}} = require('${1:module}');",
        "description": "destructuring require assignment"
    },
    "destructuring require assignment local": {
        "prefix": "dreql",
        "body": "const {${1:module}} = require('./${1:module}');",
        "description": "destructuring require assignment local"
    },
    "exports.member": {
        "prefix": "em",
        "body": "exports.${1:member} = ${2:value};",
        "description": "exports.member"
    },
    "module.exports": {
        "prefix": "me",
        "body": "module.exports = ${1:name};",
        "description": "module.exports"
    },
    "module exports object": {
        "prefix": "meo",
        "body": "module.exports = {\n\t${1:member}\n};",
        "description": "module exports object"
    },
    "event handler": {
        "prefix": "on",
        "body": "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n});",
        "description": "event handler"
    },
    "HTTP - https://nodejs.org/api/http.html": {
        "prefix": "http",
        "body": [
            "let http = require('http')",
            "const PORT = ${1};",
            "",
            "",
            "http.createServer(",
            "  (request,res)=>{",
            "    if (request.url == ${2:'/'}) {",
            "      res.writeHead(200, {",
            "        'Content-Type': 'text/html',",
            "        'Content-Length': ${3:index.html}.length,",
            "        'Expires': new Date().toUTCString()",
            "      })",
            "      res.end(${3:index.html});",
            "    }",
            "    else {",
            "      return response.end('Invalid request');",
            "    }",
            "  }",
            ").listen(PORT);",
            ""
        ],
        "description": "Create a basic HTTP server - https://nodejs.org/api/http.html"
    }
,
    "import React": {
        "prefix": "imr",
        "body": [
            "import React from 'react'"
        ]
    },
    "import ReactDOM": {
        "prefix": "imrd",
        "body": [
            "import ReactDOM from 'react-dom'",
            ""
        ]
    },
    "import React, { Component }": {
        "prefix": "imrc",
        "body": [
            "import React, { Component } from 'react'",
            ""
        ]
    },
    "import React, {useState}": {
        "prefix": "imrs",
        "body": [
            "import React, { useState } from 'react'",
            ""
        ]
    },
    "import React, {useState, useEffect}": {
        "prefix": "imrse",
        "body": [
            "import React, { useState, useEffect } from 'react'",
            ""
        ]
    },
    "import all react hooks": {
        "prefix": "irh",
        "body": [
            "import React, { useState, useContext, useEffect, useCallback, useMemo } from 'react';"
        ]
    },
    "import react hook": {
        "prefix": "irh",
        "body": [
            "import React, ${|useState, useContext, useEffect, useCallback, useMemo|} from 'react';"
        ]
    },
    "useState": {
        "prefix": "ush",
        "body": [
            "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);$0"
        ],
        "description": "React useState() hook"
    },
    "useEffect": {
        "prefix": "ueh",
        "body": [
            "useEffect(() => {",
            "\t$1",
            "\n\treturn cleanUp = () => {",
            "\t\t$2",
            "\t}",
            "}, [${3}]);$0"
        ],
        "description": "React useEffect() hook"
    },
    "useContext": {
        "prefix": "uch",
        "body": [
            "const $1 = useContext($2);$0"
        ],
        "description": "React useContext() hook"
    },
    "useCallback": {
        "prefix": "ucbh",
        "body": [
            "const ${1:memoizedCallback} = useCallback(",
            "\t() => {",
            "\t\t${2:doSomething}(${3:a}, ${4:b})",
            "\t},",
            "\t[${5:a}, ${6:b}],",
            ");$0"
        ],
        "description": "React useCallback() hook"
    },
    "useMemo": {
        "prefix": "umh",
        "body": [
            "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}]);$0"
        ],
        "description": "React useMemo() hook"
    },
    "reactFunctionalComponent": {
        "prefix": "rfc",
        "body": [
            "import React from 'react'",
            "",
            "export default function ${1:${COMPONENT_NAME}}() {",
            "\treturn (",
            "\t\t<div>",
            "\t\t\t$0",
            "\t\t</div>",
            "\t)",
            "}",
            ""
        ],
        "description": "Creates a React Functional Component with ES7 module system"
    },
    "reactFunctionalComponentWithPropTypes": {
        "prefix": "rfcp",
        "body": [
            "import React from 'react'",
            "import PropTypes from 'prop-types'",
            "",
            "function ${1:${COMPONENT_NAME}}(props) {",
            "\treturn (",
            "\t\t<div>",
            "\t\t\t$0",
            "\t\t</div>",
            "\t)",
            "}",
            "",
            "${1:${COMPONENT_NAME}}.propTypes = {",
            "",
            "}",
            "",
            "export default ${1:${COMPONENT_NAME}}",
            "",
            ""
        ],
        "description": "Creates a React Functional Component with ES7 module system with PropTypes"
    },
    "reactNativeFunctionalExportComponent": {
        "prefix": "rnfe",
        "body": [
            "import React from 'react'",
            "import { View, Text } from 'react-native'",
            "",
            "const ${1:${COMPONENT_NAME}} = () => {",
            "\treturn (",
            "\t\t<View>",
            "\t\t\t<Text>$0</Text>",
            "\t\t</View>",
            "\t)",
            "}",
            "",
            "export default ${1:${COMPONENT_NAME}}",
            ""
        ],
        "description": "Creates a React Native Functional Component"
    },
    "React useState Component (functional)": {
        "prefix": "rusc",
        "body": [
            "import React, { useState } from 'react';\n",
            "export default function ${1:COMPONENT_NAME}() {",
            "\tconst [${2}, set${2}] = useState(${3| ,'string value',1,[],{},true,false,null|});\n",
            "\treturn (",
            "\t\t<>",
            "\t\t\t$0",
            "\t\t</>",
            "\t)",
            "}",
            ""
        ],
        "description": "Creates a React Functional Component with useState and fragments"
    },
    "React useState Functional Component With PropTypes": {
        "prefix": "ruscp",
        "body": [
            "import React, { useState } from 'react';",
            "const [${2}, set${2/(.*)/${2:/capitalize}/}] = useState();",
            "import PropTypes from 'prop-types'",
            "",
            "function ${1:${COMPONENT_NAME}}(props) {",
            "\treturn (",
            "\t\t<div>",
            "\t\t\t$0",
            "\t\t</div>",
            "\t)",
            "}",
            "",
            "${1:${COMPONENT_NAME}}.propTypes = {",
            "",
            "}",
            "",
            "export default ${1:${COMPONENT_NAME}}",
            "",
            ""
        ],
        "description": "Creates a useState Component with PropTypes"
    },
    "reactFunctionMemoComponentWithPropTypes": {
        "prefix": "rmcp",
        "body": [
            "import React, { memo } from 'react'",
            "import PropTypes from 'prop-types'",
            "const ${7:${COMPONENT_NAME}} = memo(function ${8:${COMPONENT_NAME}}(props) {",
            "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}]);",
            "\treturn (",
            "\t\t<div>",
            "\t\t\t$0",
            "\t\t</div>",
            "\t)",
            "})",
            "",
            "${7:${COMPONENT_NAME}}.propTypes = {",
            "",
            "}",
            "",
            "export default ${7:${COMPONENT_NAME}}",
            ""
        ],
        "description": "Creates a React Memo Function Component with PropTypes and use memo"
    }
,
    "describe": {
        "prefix": "desc",
        "body": "describe('${1:description}', () => {\n\t${0}\n});",
        "description": "describe"
    },
    "context": {
        "prefix": "cont",
        "body": "context('${1:description}', () => {\n\t${0}\n});",
        "description": "context"
    },
    "it": {
        "prefix": "it",
        "body": "it('${1:description}', () => {\n\t${0}\n});",
        "description": "it"
    },
    "it synchronous": {
        "prefix": "its",
        "body": "it('${1:description}', () => {\n\t${0}\n});",
        "description": "it synchronous"
    },
    "it asynchronous": {
        "prefix": "ita",
        "body": "it('${1:description}', (done) => {\n\t${0}\n\tdone();\n});",
        "description": "it asynchronous"
    },
    "before test suite": {
        "prefix": "bf",
        "body": "before(() => {\n\t${0}\n});",
        "description": "before test suite"
    },
    "before each test": {
        "prefix": "bfe",
        "body": "beforeEach(() => {\n\t${0}\n});",
        "description": "before each test"
    },
    "after test suite": {
        "prefix": "aft",
        "body": "after(() => {\n\t${0}\n});",
        "description": "after test suite"
    },
    "after each test": {
        "prefix": "afe",
        "body": "afterEach(() => {\n\t${0}\n});",
        "description": "after each test"
    }
,
	"Node Dockerfile": {
		"prefix": "js1-dockerfile",
		"body": [
		  "FROM node:${1|latest,12|}",
		  "WORKDIR /usr/src/app",
		  "RUN ${2|npm install, |}",
		  "COPY package*.json ./ && . . ${3| ,&& |}",
		  "EXPOSE ${4|3000, |}",
		  "CMD [\"npm\", \"start\"]"
		],
		"description": "Creates a simple Dockerfile to wrap your node application in"
	}
}